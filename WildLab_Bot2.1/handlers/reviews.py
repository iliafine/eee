from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from models import Session, UserSettings
from states import ReviewState
from keyboards import back_button, back_button_auto
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import logging

router = Router()
logger = logging.getLogger(__name__)

# ============ –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π ============

def get_unanswered_reviews(user_id: int):
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API Wildberries —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ö–∞–∂–¥—ã–π –æ—Ç–∑—ã–≤ ‚Äì —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏: id, stars, photo, comment, pros, cons.
    """
    return [
        {"id": 101, "stars": 5, "photo": True, "comment": "–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç!", "pros": "–ö–∞—á–µ—Å—Ç–≤–æ", "cons": ""},
        {"id": 102, "stars": 4, "photo": False, "comment": "–•–æ—Ä–æ—à–∏–π —Ç–æ–≤–∞—Ä", "pros": "–¶–µ–Ω–∞", "cons": "–î–∏–∑–∞–π–Ω"},
    ]

def generate_prompt(user: UserSettings, review: dict, arguments: list) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º—Ç –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.
    –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–¥–∞–Ω—ã —Ñ–∏—Ä–º–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø—Ä–æ—â–∞–Ω–∏–µ, –æ–Ω–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è.
    """
    greeting = user.greeting if user.greeting else ""
    farewell = user.farewell if user.farewell else ""
    args_text = ", ".join(arguments) if arguments else ""
    return f"{greeting}\n–û—Ç–∑—ã–≤: {review['comment']}\n–ê—Ä–≥—É–º–µ–Ω—Ç—ã: {args_text}\n{farewell}"

def generate_reply(prompt: str) -> str:
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ DeepSeek API.
    –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é, –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç.
    """
    return f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ."

def send_review_reply(review_id: int, reply: str):
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤ —á–µ—Ä–µ–∑ API Wildberries.
    –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞.
    """
    print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–∑—ã–≤–∞ {review_id}: {reply}")

# ============ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ ============

async def check_new_reviews(bot):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã:
      - –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (stub get_unanswered_reviews).
      - –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö.
      - –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ –¥–ª—è 5‚Äë–∑–≤—ë–∑–¥–æ—á–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –±–µ–∑ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç.
    """
    with Session() as session:
        users = session.query(UserSettings).all()
        for user in users:
            try:
                reviews = get_unanswered_reviews(user.user_id)
                if not reviews:
                    continue

                if user.notifications_enabled:
                    await bot.send_message(
                        user.user_id,
                        f"üì® –£ –≤–∞—Å –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã: {len(reviews)}"
                    )

                for review in reviews:
                    if (user.auto_reply_enabled and user.auto_reply_five_stars and
                        review["stars"] == 5 and review["cons"] in ("", None, "-")):
                        prompt = generate_prompt(user, review, [])
                        reply = generate_reply(prompt)
                        send_review_reply(review["id"], reply)
                        await bot.send_message(
                            user.user_id,
                            f"ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç–∑—ã–≤–∞ id {review['id']}"
                        )
            except Exception as e:
                logger.error(f"Error processing reviews for user {user.user_id}: {e}")

# ============ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ============

@router.callback_query(F.data == "pending_reviews")
async def reviews_list_handler(callback: types.CallbackQuery):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.
    –ö–∞–∂–¥—ã–π –æ—Ç–∑—ã–≤ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–≤—ë–∑–¥, –ø—Ä–∏–∑–Ω–∞–∫–æ–º –Ω–∞–ª–∏—á–∏—è —Ñ–æ—Ç–æ, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º, –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞–º–∏ –∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞–º–∏.
    """
    try:
        with Session() as session:
            user = session.get(UserSettings, callback.from_user.id)
            if not user or not user.wb_api_key:
                await callback.message.edit_text(
                    "‚ùå API-–∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á.",
                    reply_markup=back_button()
                )
                return

        reviews = get_unanswered_reviews(callback.from_user.id)
        if not reviews:
            await callback.message.edit_text("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.")
            return

        text = "üì¢ **–ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞:"
        builder = InlineKeyboardBuilder()
        for review in reviews:
            review_text = f"{review['stars']}‚≠ê | {'üì∏' if review['photo'] else ''} {review['comment']}"
            builder.button(text=review_text, callback_data=f"review_{review['id']}")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="auto_reply")
        builder.adjust(1)
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="Markdown")
    except Exception as e:
        logger.error(f"Error in reviews_list_handler: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@router.callback_query(F.data.startswith("review_"))
async def review_detail_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞.
    –°–æ—Ö—Ä–∞–Ω—è–µ–º id –æ—Ç–∑—ã–≤–∞ –∏ –æ–±–Ω—É–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.
    """
    try:
        review_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        reviews = get_unanswered_reviews(user_id)
        review = next((r for r in reviews if r["id"] == review_id), None)
        if not review:
            await callback.message.edit_text("‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
        review_text = f"‚≠ê {review['stars']}\n"
        if review.get("photo"):
            review_text += f"üì∏ –§–æ—Ç–æ: {'–î–∞' if review['photo'] else '–ù–µ—Ç'}\n"
        if review.get("comment"):
            review_text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {review['comment']}\n"
        if review.get("pros"):
            review_text += f"‚úÖ –î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞: {review['pros']}\n"
        if review.get("cons"):
            review_text += f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏: {review['cons']}\n"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(review_id=review_id, regeneration_count=0)
        await callback.message.edit_text(
            f"{review_text}\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
            reply_markup=back_button_auto()
        )
        await state.set_state(ReviewState.waiting_for_arguments)
    except Exception as e:
        logger.error(f"Error in review_detail_handler: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@router.message(ReviewState.waiting_for_arguments)
async def process_review_arguments(message: types.Message, state: FSMContext):
    """
    –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç, –≤—ã–∑—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π.
    """
    try:
        arguments = [arg.strip() for arg in message.text.split(",") if arg.strip()]
        await state.update_data(arguments=arguments)

        with Session() as session:
            user = session.get(UserSettings, message.from_user.id)
            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

        data = await state.get_data()
        review_id = data.get("review_id")
        reviews = get_unanswered_reviews(message.from_user.id)
        review = next((r for r in reviews if r["id"] == review_id), None)
        if not review:
            await message.answer("‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        prompt = generate_prompt(user, review, arguments)
        generated_reply = generate_reply(prompt)
        await state.update_data(generated_reply=generated_reply)

        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="regenerate")
        builder.button(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç", callback_data="write_own")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_reviews")
        builder.adjust(1)

        await message.answer(f"ü§ñ –û—Ç–≤–µ—Ç:\n{generated_reply}", reply_markup=builder.as_markup())
        await state.set_state(ReviewState.waiting_for_action)
    except Exception as e:
        logger.error(f"Error in process_review_arguments: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@router.callback_query(F.data == "regenerate")
async def regenerate_reply(callback: types.CallbackQuery, state: FSMContext):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç (–¥–æ 3 —Ä–∞–∑).
    """
    try:
        data = await state.get_data()
        count = data.get("regeneration_count", 0)
        if count >= 3:
            await callback.answer("–õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤—Ä—É—á–Ω—É—é.", show_alert=True)
            return

        with Session() as session:
            user = session.get(UserSettings, callback.from_user.id)
        reviews = get_unanswered_reviews(callback.from_user.id)
        review = next((r for r in reviews if r["id"] == data.get("review_id")), None)
        arguments = data.get("arguments", [])
        prompt = generate_prompt(user, review, arguments)
        new_reply = generate_reply(prompt)

        await state.update_data(generated_reply=new_reply, regeneration_count=count + 1)

        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="regenerate")
        builder.button(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç", callback_data="write_own")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_reviews")
        builder.adjust(1)

        await callback.message.edit_text(f"ü§ñ –û—Ç–≤–µ—Ç:\n{new_reply}", reply_markup=builder.as_markup())
    except Exception as e:
        logger.error(f"Error in regenerate_reply: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)

@router.callback_query(F.data == "write_own")
async def write_own_callback(callback: types.CallbackQuery, state: FSMContext):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–≤–æ–¥—É —Å–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.
    """
    await callback.message.edit_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:", reply_markup=back_button_auto())
    await state.set_state(ReviewState.waiting_for_custom_reply)

@router.message(ReviewState.waiting_for_custom_reply)
async def process_custom_reply(message: types.Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ.
    """
    try:
        custom_reply = message.text
        await state.update_data(generated_reply=custom_reply)

        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data="send_reply")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_reviews")
        builder.adjust(1)

        await message.answer(f"ü§ñ –í–∞—à –æ—Ç–≤–µ—Ç:\n{custom_reply}", reply_markup=builder.as_markup())
    except Exception as e:
        logger.error(f"Error in process_custom_reply: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@router.callback_query(F.data == "send_reply")
async def send_reply_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ (–∑–∞–≥–ª—É—à–∫–∞).
    –ó–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API Wildberries –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞.
    """
    try:
        data = await state.get_data()
        review_id = data.get("review_id")
        reply_text = data.get("generated_reply", "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
        send_review_reply(review_id, reply_text)
        logger.info(f"User {callback.from_user.id} sent reply to review {review_id}")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        await callback.message.edit_text(f"üì® –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç–∑—ã–≤–∞ id {review_id}:\n{reply_text}")
    except Exception as e:
        logger.error(f"Error in send_reply_handler: {e}")
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@router.callback_query(F.data == "back_to_reviews")
async def back_to_reviews_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –æ—Ç–∑—ã–≤–æ–≤.
    """
    await state.clear()
    await reviews_list_handler(callback)

# ============ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ ============

async def on_startup(dp):
    scheduler = AsyncIOScheduler()
    scheduler.add_job(check_new_reviews, 'interval', minutes=5, args=(dp.bot,))
    scheduler.start()

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, on_startup=on_startup)