from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from models import Session, UserSettings
from states import AutoReplyState
from keyboards import back_button, auto_reply_settings_menu

router = Router()

@router.callback_query(lambda c: c.data == "auto_reply")
async def auto_reply_handler(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤", callback_data="auto_reply_settings")
    builder.button(text="üìã –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã", callback_data="pending_reviews")
    builder.button(text="‚óÄÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start")
    builder.adjust(1)

    await callback.message.edit_text(
        "ü§ñ **–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )



@router.callback_query(F.data == "auto_reply_settings")
async def auto_reply_settings_handler(callback: types.CallbackQuery):
    with Session() as session:
        user = session.get(UserSettings, callback.from_user.id)

    text = (
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤**\n\n"
        f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if user.notifications_enabled else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    )

    await callback.message.edit_text(
        text,
        reply_markup=auto_reply_settings_menu(user),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "toggle_notifications")
async def toggle_notifications_handler(callback: types.CallbackQuery):
    with Session() as session:
        user = session.get(UserSettings, callback.from_user.id)
        if not user:
            user = UserSettings(user_id=callback.from_user.id)
            session.add(user)

        user.notifications_enabled = not user.notifications_enabled
        session.commit()

    await auto_reply_settings_handler(callback)

@router.callback_query(F.data == "toggle_auto_reply")
async def toggle_auto_reply_handler(callback: types.CallbackQuery):
    with Session() as session:
        user = session.get(UserSettings, callback.from_user.id)
        if not user:
            user = UserSettings(user_id=callback.from_user.id)
            session.add(user)

        user.auto_reply_enabled = not user.auto_reply_enabled
        session.commit()

    await auto_reply_settings_handler(callback)

