from aiogram.utils.keyboard import InlineKeyboardBuilder


def paginate_reviews(reviews: list, page: int, page_size: int = 5) -> dict:
    """
    –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤.

    Args:
        reviews (list): –°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤.
        page (int): –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.
        page_size (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç–∑—ã–≤–∞–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not isinstance(reviews, list):
        raise ValueError("reviews –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")

    if not isinstance(page, int) or page < 0:
        raise ValueError("page –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")

    if not isinstance(page_size, int) or page_size <= 0:
        raise ValueError("page_size –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")

    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if not reviews:
        return {
            "reviews": [],
            "keyboard": None
        }

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total = len(reviews)
    pages = (total + page_size - 1) // page_size

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
    if page >= pages:
        page = pages - 1

    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å—Ä–µ–∑–∞
    start_idx = page * page_size
    end_idx = start_idx + page_size

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
    reviews_builder = InlineKeyboardBuilder()
    for review in reviews[start_idx:end_idx]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ review ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
        if not isinstance(review, dict):
            continue

        review_id = review.get("id")
        stars = review.get("stars", 0)
        comment = review.get("comment", "")
        has_photo = review.get("photo", False)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        review_text = f"{stars}‚≠ê | {'üì∏' if has_photo else ''} {comment[:20]}..."
        reviews_builder.button(
            text=review_text,
            callback_data=f"review_{review_id}"
        )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_builder = InlineKeyboardBuilder()
    if page > 0:
        pagination_builder.button(text="‚óÄÔ∏è", callback_data=f"page_{page - 1}")
    pagination_builder.button(text=f"{page + 1}/{pages}", callback_data="current")
    if page < pages - 1:
        pagination_builder.button(text="‚ñ∂Ô∏è", callback_data=f"page_{page + 1}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return {
        "reviews": reviews[start_idx:end_idx],
        "keyboard": pagination_builder.as_markup()
    }